Don't deploy this service, your DALL-E 2 account will be banned for using it

service: quantum-mirror-lambda

provider:
  name: aws
  stage: ${opt:stage, 'prod'}
  region: us-east-1
  runtime: nodejs16.x
  logRetentionInDays: 30
  endpointType: regional

custom:
  handlerDir:
    prod: src
    dummy: dummy
  handlerJS:
    prod: src/index
    dummy: dummy/index

resources:
  Resources:
    CFOriginPolicyXAuthorization:
      Type: AWS::CloudFront::OriginRequestPolicy
      Properties:
        OriginRequestPolicyConfig:
          Name: ${self:service}-${self:provider.stage}-XAuthorization
          CookiesConfig:
            CookieBehavior: none
          HeadersConfig:
            HeaderBehavior: whitelist
            Headers:
              - X-Authorization # For the OpenAI bearer token
          QueryStringsConfig:
            QueryStringBehavior: all

    CFImageCachePolicy:
      Type: AWS::CloudFront::CachePolicy
      Properties:
        CachePolicyConfig:
          Name: ${self:service}-${self:provider.stage}-ImageCache
          DefaultTTL: 3600
          MinTTL: 3600
          MaxTTL: 86400
          ParametersInCacheKeyAndForwardedToOrigin:
            EnableAcceptEncodingBrotli: false
            EnableAcceptEncodingGzip: false
            CookiesConfig:
              CookieBehavior: none
            HeadersConfig:
              HeaderBehavior: none
            QueryStringsConfig:
              QueryStringBehavior: all

    CloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          DefaultCacheBehavior:
            TargetOriginId: quantum-mirror-lambda
            Compress: false
            CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad # CachingDisabled (AWS managed)
            OriginRequestPolicyId:
              Ref: CFOriginPolicyXAuthorization # Pass X-Authorization header to Lambda
            ViewerProtocolPolicy: https-only
            AllowedMethods:
              - GET # For polling
              - HEAD
              - OPTIONS
              - PUT
              - PATCH
              - POST # For submitting new jobs
              - DELETE
          CacheBehaviors:
            # We don't pass any headers to this one (no X-Authorization)
            - PathPattern: 'getImage/*'
              TargetOriginId: quantum-mirror-lambda
              Compress: false
              CachePolicyId:
                Ref: CFImageCachePolicy
              ViewerProtocolPolicy: allow-all
              AllowedMethods:
                - GET
                - HEAD
          Enabled: true
          Origins:
            - Id: quantum-mirror-lambda
              DomainName:
                Fn::Join:
                  - ''
                  - - Ref: HttpApi
                    - '.execute-api.'
                    - Ref: AWS::Region
                    - '.'
                    - Ref: AWS::URLSuffix
              CustomOriginConfig:
                OriginProtocolPolicy: https-only
                OriginSSLProtocols:
                  - TLSv1.2
          ViewerCertificate:
            CloudFrontDefaultCertificate: true
  Outputs:
    EndpointForCameraTokenTxt:
      Value:
        Fn::Join:
          - ''
          - - "https://"
            - Fn::GetAtt:
              - CloudFrontDistribution
              - DomainName
            - "/"

functions:
  submitImage:
    handler: ${self:custom.handlerJS.${self:provider.stage}}.submitImage
    memorySize: 1024
    timeout: 30
    layers:
      - !Ref ImagemagickLambdaLayer
    events:
      - httpApi:
          method: POST
          path: /submitImage

  pollTask:
    handler: ${self:custom.handlerJS.${self:provider.stage}}.pollTask
    memorySize: 128
    timeout: 30
    events:
      - httpApi:
          method: GET
          path: /pollTask/{taskID}

  getImage:
    handler: ${self:custom.handlerJS.${self:provider.stage}}.getImage
    memorySize: 1024
    timeout: 30
    layers:
      - !Ref ImagemagickLambdaLayer
    events:
      - httpApi:
          method: GET
          path: /getImage/{imagePath+}

package:
  patterns:
    - '!*' # Exclude loose files in root if not included (e.g. config files)
    - '!dummy/**' # Only for dummy stage
    - '!imagemagick/**' # We pack these into a zip instead
    - '!.idea/**'
    - 'package*.json'
    - ${self:custom.handlerDir.${self:provider.stage}}/**

layers:
  # Built using https://github.com/serverlesspub/imagemagick-aws-lambda-2
  #
  # Then: cd imagemagick && zip --symlinks -r ../imagemagick.zip *
  # Since otherwise serverless duplicates symlinks and zip is too big
  imagemagick:
    package:
      artifact: imagemagick.zip
    compatibleArchitectures:
      - x86_64